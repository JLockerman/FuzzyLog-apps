package c_link;


import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import c_link.size_t;
import c_link.size_tByReference;

/**
 * JNA Wrapper for library <b>c_link</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface FuzzyLogLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "c_link";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(FuzzyLogLibrary.JNA_LIBRARY_NAME);
	public static final FuzzyLogLibrary INSTANCE = (FuzzyLogLibrary) Native
			.loadLibrary(FuzzyLogLibrary.JNA_LIBRARY_NAME, FuzzyLogLibrary.class);
	/** <i>native declaration : fuzzy_log.h</i> */
	public static final int FUZZY_LOG_HEADER = (int) 1;
	/** <i>native declaration : fuzzy_log.h</i> */
	public static final int DELOS_MAX_DATA_SIZE = (int) 8000;

	/** <i>native declaration : fuzzy_log.h:189</i> */
	public interface fuzzy_log_callback extends Callback {
		byte apply(Pointer uint8_tPtr1, short uint16_t1);
	};

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle(const char*, size_t, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:29</i><br>
	 * @deprecated use the safer methods {@link #new_dag_handle(java.lang.String, com.ochafik.lang.jnaerator.runtime.size_t, java.lang.String[], c_link.colors)} and {@link #new_dag_handle(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, com.sun.jna.ptr.PointerByReference, c_link.colors)} instead
	 */
	@Deprecated
	Pointer new_dag_handle(Pointer lock_server_ip, size_t num_chain_servers,
			PointerByReference chain_server_ips, colors.ByReference interesting_colors);

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle(const char*, size_t, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:29</i>
	 */
	Pointer new_dag_handle(String lock_server_ip, size_t num_chain_servers, String chain_server_ips[],
			colors.ByReference interesting_colors);

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_with_skeens(size_t, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:39</i><br>
	 * @deprecated use the safer methods {@link #new_dag_handle_with_skeens(com.ochafik.lang.jnaerator.runtime.size_t, java.lang.String[], c_link.colors)} and {@link #new_dag_handle_with_skeens(com.ochafik.lang.jnaerator.runtime.size_t, com.sun.jna.ptr.PointerByReference, c_link.colors)} instead
	 */
	@Deprecated
	Pointer new_dag_handle_with_skeens(size_t num_chain_servers, PointerByReference chain_server_ips,
			colors.ByReference interesting_colors);

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_with_skeens(size_t, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:39</i>
	 */
	Pointer new_dag_handle_with_skeens(size_t num_chain_servers, String chain_server_ips[],
			colors.ByReference interesting_colors);

	/**
	 * ! Creates a new DAGHandle for a server group based on a config file.<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_from_config(const char*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:44</i><br>
	 * @deprecated use the safer methods {@link #new_dag_handle_from_config(java.lang.String, c_link.colors)} and {@link #new_dag_handle_from_config(com.sun.jna.Pointer, c_link.colors)} instead
	 */
	@Deprecated
	Pointer new_dag_handle_from_config(Pointer config_filename, colors.ByReference interesting_colors);

	/**
	 * ! Creates a new DAGHandle for a server group based on a config file.<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_from_config(const char*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:44</i>
	 */
	PointerByReference new_dag_handle_from_config(String config_filename, colors.ByReference interesting_colors);

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_with_replication(size_t, const const char**, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:49</i><br>
	 * @deprecated use the safer methods {@link #new_dag_handle_with_replication(com.ochafik.lang.jnaerator.runtime.size_t, java.lang.String[], java.lang.String[], c_link.colors)} and {@link #new_dag_handle_with_replication(com.ochafik.lang.jnaerator.runtime.size_t, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, c_link.colors)} instead
	 */
	@Deprecated
	Pointer new_dag_handle_with_replication(size_t num_chain_servers,
			PointerByReference chain_server_head_ips, PointerByReference chain_server_tail_ips,
			colors.ByReference interesting_colors);

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_with_replication(size_t, const const char**, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:49</i>
	 */
	Pointer new_dag_handle_with_replication(size_t num_chain_servers, String chain_server_head_ips[],
			String chain_server_tail_ips[], colors.ByReference interesting_colors);


	c_link.reader_and_writer.ByValue split_dag_handle(Pointer handle);

	/**
	 * Original signature : <code>write_id do_append(DAGHandle*, char*, size_t, colors*, colors*, uint8_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:51</i><br>
	 * @deprecated use the safer methods {@link #do_append(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors, byte)} and {@link #do_append(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors, byte)} instead
	 */
	//@Deprecated
	c_link.write_id.ByValue do_append(Pointer handle, Pointer data, size_t data_size, colors.ByReference inhabits,
			colors.ByReference depends_on, byte async);

	/**
	 * Original signature : <code>write_id do_append(DAGHandle*, char*, size_t, colors*, colors*, uint8_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:51</i>
	 */
	c_link.write_id.ByValue do_append(Pointer handle, ByteBuffer data, size_t data_size, colors.ByReference inhabits,
			colors.ByReference depends_on, byte async);

	/**
	 * Original signature : <code>write_id do_append(DAGHandle*, char*, size_t, colors*, colors*, uint8_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:51</i>
	 */
	c_link.write_id.ByValue do_append(PointerByReference handle, Pointer data, size_t data_size, colors.ByReference inhabits,
			colors.ByReference depends_on, byte async);

	/**
	 * !<br>
	 * Original signature : <code>fuzzy_log_location no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:71</i><br>
	 * @deprecated use the safer methods {@link #no_remote_append(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} and {@link #no_remote_append(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} instead
	 */
	@Deprecated
	fuzzy_log_location.ByValue no_remote_append(Pointer handle, Pointer data, size_t data_size, colors.ByReference inhabits,
			fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>fuzzy_log_location no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:71</i>
	 */
	fuzzy_log_location.ByValue no_remote_append(PointerByReference handle, ByteBuffer data, size_t data_size,
			colors.ByReference inhabits, fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>fuzzy_log_location no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:71</i>
	 */
	fuzzy_log_location.ByValue no_remote_append(PointerByReference handle, Pointer data, size_t data_size,
			colors.ByReference inhabits, fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:76</i><br>
	 * @deprecated use the safer methods {@link #async_no_remote_append(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} and {@link #async_no_remote_append(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} instead
	 */
	@Deprecated
	c_link.write_id.ByValue async_no_remote_append(Pointer handle, Pointer data, size_t data_size, colors.ByReference inhabits,
			fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:76</i>
	 */
	c_link.write_id.ByValue async_no_remote_append(PointerByReference handle, ByteBuffer data, size_t data_size,
			colors.ByReference inhabits, fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_no_remote_append(DAGHandle*, char*, size_t, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:76</i>
	 */
	c_link.write_id.ByValue async_no_remote_append(PointerByReference handle, Pointer data, size_t data_size,
			colors.ByReference inhabits, fuzzy_log_location deps, size_t num_deps);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_causal_append(DAGHandle*, char*, size_t, colors*, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:81</i><br>
	 * @deprecated use the safer methods {@link #async_causal_append(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} and {@link #async_causal_append(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors, c_link.fuzzy_log_location, com.ochafik.lang.jnaerator.runtime.size_t)} instead
	 */
	@Deprecated
	c_link.write_id.ByValue async_causal_append(Pointer handle, Pointer data, size_t data_size, colors.ByReference inhabits,
			colors.ByReference depends_on, fuzzy_log_location happens_after, size_t num_happens_after);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_causal_append(DAGHandle*, char*, size_t, colors*, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:81</i>
	 */
	c_link.write_id.ByValue async_causal_append(PointerByReference handle, ByteBuffer data, size_t data_size,
			colors.ByReference inhabits, colors.ByReference depends_on, fuzzy_log_location happens_after, size_t num_happens_after);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_causal_append(DAGHandle*, char*, size_t, colors*, colors*, fuzzy_log_location*, size_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:81</i>
	 */
	c_link.write_id.ByValue async_causal_append(PointerByReference handle, Pointer data, size_t data_size,
			colors.ByReference inhabits, colors.ByReference depends_on, fuzzy_log_location happens_after, size_t num_happens_after);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_simple_causal_append(DAGHandle*, char*, size_t, colors*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:86</i><br>
	 * @deprecated use the safer methods {@link #async_simple_causal_append(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors)} and {@link #async_simple_causal_append(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_t, c_link.colors, c_link.colors)} instead
	 */
	@Deprecated
	c_link.write_id.ByValue async_simple_causal_append(Pointer handle, Pointer data, size_t data_size,
			colors.ByReference inhabits, colors.ByReference happens_after);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_simple_causal_append(DAGHandle*, char*, size_t, colors*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:86</i>
	 */
	c_link.write_id.ByValue async_simple_causal_append(Pointer handle, ByteBuffer data, size_t data_size,
			colors.ByReference inhabits, colors.ByReference happens_after);

	/**
	 * !<br>
	 * Original signature : <code>write_id async_simple_causal_append(DAGHandle*, char*, size_t, colors*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:86</i>
	 */
	c_link.write_id.ByValue async_simple_causal_append(PointerByReference handle, Pointer data, size_t data_size,
			colors.ByReference inhabits, colors.ByReference happens_after);

	/**
	 * !<br>
	 * Original signature : <code>void get_next(DAGHandle*, char*, size_t*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:91</i><br>
	 * @deprecated use the safer methods {@link #get_next(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.size_tByReference, c_link.colors)} and {@link #get_next(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.size_tByReference, c_link.colors)} instead
	 */
	@Deprecated
	void get_next(Pointer handle, Pointer data_out, size_tByReference data_read, colors.ByReference inhabits_out);

	/**
	 * !<br>
	 * Original signature : <code>void get_next(DAGHandle*, char*, size_t*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:91</i>
	 */
	void get_next(Pointer handle, ByteBuffer data_out, size_tByReference data_read, colors.ByReference inhabits_out);

	/**
	 * !<br>
	 * Original signature : <code>void get_next(DAGHandle*, char*, size_t*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:91</i>
	 */
	void get_next(PointerByReference handle, Pointer data_out, size_tByReference data_read, colors.ByReference inhabits_out);

	/**
	 * !<br>
	 * Original signature : <code>get_next_val get_next2(DAGHandle*, size_t*, size_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:100</i><br>
	 * @deprecated use the safer method {@link #get_next2(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.size_tByReference, com.ochafik.lang.jnaerator.runtime.size_tByReference)} instead
	 */
	c_link.get_next_val.ByValue get_next2(Pointer handle, size_tByReference data_size,
			size_tByReference locs_read);

	/**
	 * !<br>
	 * Original signature : <code>get_next_val get_next2(DAGHandle*, size_t*, size_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:100</i>
	 */
	c_link.get_next_val.ByValue get_next2(PointerByReference handle, size_tByReference data_size,
			size_tByReference locs_read);

	/**
	 * !<br>
	 * Original signature : <code>get_next_val async_get_next2(DAGHandle*, size_t*, size_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:105</i><br>
	 * @deprecated use the safer method {@link #async_get_next2(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.size_tByReference, com.ochafik.lang.jnaerator.runtime.size_tByReference)} instead
	 */
	@Deprecated
	c_link.get_next_val.ByValue async_get_next2(Pointer handle, size_tByReference data_size,
			size_tByReference locs_read);

	/**
	 * !<br>
	 * Original signature : <code>get_next_val async_get_next2(DAGHandle*, size_t*, size_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:105</i>
	 */
	c_link.get_next_val.ByValue async_get_next2(PointerByReference handle, size_tByReference data_size,
			size_tByReference locs_read);

	/**
	 * !<br>
	 * Original signature : <code>void flush_completed_appends(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:110</i><br>
	 * @deprecated use the safer method {@link #flush_completed_appends(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void flush_completed_appends(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>void flush_completed_appends(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:110</i>
	 */
	void flush_completed_appends(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>void wait_for_all_appends(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:115</i><br>
	 * @deprecated use the safer method {@link #wait_for_all_appends(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void wait_for_all_appends(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>void wait_for_all_appends(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:115</i>
	 */
	void wait_for_all_appends(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>write_id wait_for_any_append(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:120</i><br>
	 * @deprecated use the safer method {@link #wait_for_any_append(com.sun.jna.ptr.PointerByReference)} instead
	 */

	c_link.write_id.ByValue wait_for_any_append(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>write_id wait_for_any_append(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:120</i>
	 */
	c_link.write_id.ByValue wait_for_any_append(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>write_id try_wait_for_any_append(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:125</i><br>
	 * @deprecated use the safer method {@link #try_wait_for_any_append(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	c_link.write_id.ByValue try_wait_for_any_append(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>write_id try_wait_for_any_append(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:125</i>
	 */
	c_link.write_id.ByValue try_wait_for_any_append(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>void wait_for_a_specific_append(DAGHandle*, write_id)</code><br>
	 * <i>native declaration : fuzzy_log.h:130</i><br>
	 * @deprecated use the safer method {@link #wait_for_a_specific_append(com.sun.jna.ptr.PointerByReference, c_link.write_id.ByValue)} instead
	 */
	@Deprecated
	void wait_for_a_specific_append(Pointer handle, c_link.write_id.ByValue id);

	/**
	 * !<br>
	 * Original signature : <code>void wait_for_a_specific_append(DAGHandle*, write_id)</code><br>
	 * <i>native declaration : fuzzy_log.h:130</i>
	 */
	void wait_for_a_specific_append(PointerByReference handle, c_link.write_id.ByValue id);

	/**
	 * !<br>
	 * Original signature : <code>write_locations wait_for_a_specific_append_and_locations(DAGHandle*, write_id)</code><br>
	 * <i>native declaration : fuzzy_log.h:135</i><br>
	 * @deprecated use the safer method {@link #wait_for_a_specific_append_and_locations(com.sun.jna.ptr.PointerByReference, c_link.write_id.ByValue)} instead
	 */
	@Deprecated
	c_link.write_locations.ByValue wait_for_a_specific_append_and_locations(Pointer handle, c_link.write_id.ByValue id);

	/**
	 * !<br>
	 * Original signature : <code>write_locations wait_for_a_specific_append_and_locations(DAGHandle*, write_id)</code><br>
	 * <i>native declaration : fuzzy_log.h:135</i>
	 */
	c_link.write_locations.ByValue wait_for_a_specific_append_and_locations(PointerByReference handle,
			c_link.write_id.ByValue id);

	/**
	 * !<br>
	 * Original signature : <code>write_id_and_locs try_wait_for_any_append_and_location(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:140</i><br>
	 * @deprecated use the safer method {@link #try_wait_for_any_append_and_location(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	c_link.write_id_and_locs.ByValue try_wait_for_any_append_and_location(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>write_id_and_locs try_wait_for_any_append_and_location(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:140</i>
	 */
	c_link.write_id_and_locs.ByValue try_wait_for_any_append_and_location(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>void snapshot(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:145</i><br>
	 * @deprecated use the safer method {@link #snapshot(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void snapshot(Pointer handle);

	/**
	 * !<br>
	 * Original signature : <code>void snapshot(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:145</i>
	 */
	void snapshot(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>void snapshot_colors(DAGHandle*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:150</i><br>
	 * @deprecated use the safer method {@link #snapshot_colors(com.sun.jna.ptr.PointerByReference, c_link.colors)} instead
	 */
	@Deprecated
	void snapshot_colors(Pointer handle, colors.ByReference colors);

	/**
	 * !<br>
	 * Original signature : <code>void snapshot_colors(DAGHandle*, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:150</i>
	 */
	void snapshot_colors(PointerByReference handle, colors.ByReference colors);

	/**
	 * ! Closes and frees a DAGHandle<br>
	 * Original signature : <code>void close_dag_handle(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:155</i><br>
	 * @deprecated use the safer method {@link #close_dag_handle(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void close_dag_handle(Pointer handle);

	/**
	 * ! Closes and frees a DAGHandle<br>
	 * Original signature : <code>void close_dag_handle(DAGHandle*)</code><br>
	 * <i>native declaration : fuzzy_log.h:155</i>
	 */
	void close_dag_handle(PointerByReference handle);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:160</i><br>
	 * @deprecated use the safer methods {@link #start_fuzzy_log_server(java.lang.String)} and {@link #start_fuzzy_log_server(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void start_fuzzy_log_server(Pointer server_ip);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:160</i>
	 */
	void start_fuzzy_log_server(String server_ip);

	/**
	 * ! Just like start_fuzzy_log_server except it starts the server in a _new_ thread.<br>
	 * Original signature : <code>void start_fuzzy_log_server_thread(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:165</i><br>
	 * @deprecated use the safer methods {@link #start_fuzzy_log_server_thread(java.lang.String)} and {@link #start_fuzzy_log_server_thread(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void start_fuzzy_log_server_thread(Pointer server_ip);

	/**
	 * ! Just like start_fuzzy_log_server except it starts the server in a _new_ thread.<br>
	 * Original signature : <code>void start_fuzzy_log_server_thread(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:165</i>
	 */
	void start_fuzzy_log_server_thread(String server_ip);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server_for_group(const char*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:170</i><br>
	 * @deprecated use the safer methods {@link #start_fuzzy_log_server_for_group(java.lang.String, int, int)} and {@link #start_fuzzy_log_server_for_group(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	void start_fuzzy_log_server_for_group(Pointer server_ip, int server_number, int total_servers_in_group);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server_for_group(const char*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:170</i>
	 */
	void start_fuzzy_log_server_for_group(String server_ip, int server_number, int total_servers_in_group);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server_thread_from_group(const char*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:175</i><br>
	 * @deprecated use the safer methods {@link #start_fuzzy_log_server_thread_from_group(java.lang.String, int, int)} and {@link #start_fuzzy_log_server_thread_from_group(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated
	void start_fuzzy_log_server_thread_from_group(Pointer server_ip, int server_number, int total_servers_in_group);

	/**
	 * !<br>
	 * Original signature : <code>void start_fuzzy_log_server_thread_from_group(const char*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:175</i>
	 */
	void start_fuzzy_log_server_thread_from_group(String server_ip, int server_number, int total_servers_in_group);

	/**
	 * ! NOTE this function _does_ return after all servers start.<br>
	 * Original signature : <code>void start_servers_from_config(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:182</i><br>
	 * @deprecated use the safer methods {@link #start_servers_from_config(java.lang.String)} and {@link #start_servers_from_config(com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void start_servers_from_config(Pointer config_filename);

	/**
	 * ! NOTE this function _does_ return after all servers start.<br>
	 * Original signature : <code>void start_servers_from_config(const char*)</code><br>
	 * <i>native declaration : fuzzy_log.h:182</i>
	 */
	void start_servers_from_config(String config_filename);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>FuzzyLog* fuzzy_log_new(const char*, const uint32_t*, uint16_t, fuzzy_log_callback)</code><br>
	 * <i>native declaration : fuzzy_log.h:194</i><br>
	 * @deprecated use the safer methods {@link #fuzzy_log_new(java.lang.String, int[], short, c_link.FuzzyLogLibrary.fuzzy_log_callback)} and {@link #fuzzy_log_new(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, short, c_link.FuzzyLogLibrary.fuzzy_log_callback)} instead
	 */
	@Deprecated
	FuzzyLogLibrary.FuzzyLog fuzzy_log_new(Pointer server_addr, IntByReference relevent_chains,
			short num_relevent_chains, FuzzyLogLibrary.fuzzy_log_callback callback);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>FuzzyLog* fuzzy_log_new(const char*, const uint32_t*, uint16_t, fuzzy_log_callback)</code><br>
	 * <i>native declaration : fuzzy_log.h:194</i>
	 */
	FuzzyLogLibrary.FuzzyLog fuzzy_log_new(String server_addr, int relevent_chains[], short num_relevent_chains,
			FuzzyLogLibrary.fuzzy_log_callback callback);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>ChainAndEntry fuzzy_log_append(FuzzyLog*, uint32_t, const uint8_t*, uint16_t, const ChainAndEntry*, uint16_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:199</i><br>
	 * @deprecated use the safer methods {@link #fuzzy_log_append(c_link.FuzzyLogLibrary.FuzzyLog, int, byte[], short, c_link.ChainAndEntry, short)} and {@link #fuzzy_log_append(c_link.FuzzyLogLibrary.FuzzyLog, int, com.sun.jna.Pointer, short, c_link.ChainAndEntry, short)} instead
	 */
	@Deprecated
	ChainAndEntry.ByValue fuzzy_log_append(FuzzyLogLibrary.FuzzyLog log, int chain, Pointer val, short len,
			ChainAndEntry deps, short num_deps);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>ChainAndEntry fuzzy_log_append(FuzzyLog*, uint32_t, const uint8_t*, uint16_t, const ChainAndEntry*, uint16_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:199</i>
	 */
	ChainAndEntry.ByValue fuzzy_log_append(FuzzyLogLibrary.FuzzyLog log, int chain, byte val[], short len,
			ChainAndEntry deps, short num_deps);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>void fuzzy_log_multiappend(FuzzyLog*, uint32_t*, uint16_t, const uint8_t*, uint16_t, const ChainAndEntry*, uint16_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:204</i><br>
	 * @deprecated use the safer methods {@link #fuzzy_log_multiappend(c_link.FuzzyLogLibrary.FuzzyLog, java.nio.IntBuffer, short, byte[], short, c_link.ChainAndEntry, short)} and {@link #fuzzy_log_multiappend(c_link.FuzzyLogLibrary.FuzzyLog, com.sun.jna.ptr.IntByReference, short, com.sun.jna.Pointer, short, c_link.ChainAndEntry, short)} instead
	 */
	@Deprecated
	void fuzzy_log_multiappend(FuzzyLogLibrary.FuzzyLog log, IntByReference chain, short num_chains, Pointer val,
			short len, ChainAndEntry deps, short num_deps);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>void fuzzy_log_multiappend(FuzzyLog*, uint32_t*, uint16_t, const uint8_t*, uint16_t, const ChainAndEntry*, uint16_t)</code><br>
	 * <i>native declaration : fuzzy_log.h:204</i>
	 */
	void fuzzy_log_multiappend(FuzzyLogLibrary.FuzzyLog log, IntBuffer chain, short num_chains, byte val[], short len,
			ChainAndEntry deps, short num_deps);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>ChainAndEntry fuzzy_log_play_forward(FuzzyLog*, uint32_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:209</i><br>
	 * @deprecated use the safer methods {@link #fuzzy_log_play_forward(c_link.FuzzyLogLibrary.FuzzyLog, java.nio.IntBuffer)} and {@link #fuzzy_log_play_forward(c_link.FuzzyLogLibrary.FuzzyLog, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated
	ChainAndEntry.ByValue fuzzy_log_play_forward(FuzzyLogLibrary.FuzzyLog log, IntByReference chain);

	/**
	 * ! @deprecated<br>
	 * Original signature : <code>ChainAndEntry fuzzy_log_play_forward(FuzzyLog*, uint32_t*)</code><br>
	 * <i>native declaration : fuzzy_log.h:209</i>
	 */
	ChainAndEntry.ByValue fuzzy_log_play_forward(FuzzyLogLibrary.FuzzyLog log, IntBuffer chain);

	///////////////////////////////////

	c_link.write_id.ByValue wh_async_append(Pointer handle, ByteBuffer data, size_t data_size, int inhabits);

	c_link.write_id.ByValue wh_async_multiappend(Pointer handle, ByteBuffer data, size_t data_size, colors.ByReference inhabits);

	c_link.write_id.ByValue wh_async_no_remote_multiappend(Pointer handle, ByteBuffer data, size_t data_size, colors.ByReference inhabits);

	void wh_flush_completed_appends(Pointer handle);

	c_link.write_id.ByValue wh_wait_for_any_append(Pointer handle);

	///////////////

	void rh_snapshot(Pointer handle);

	void rh_snapshot_colors(Pointer handle, colors.ByReference colors);

	c_link.get_next_val.ByValue rh_get_next2(Pointer handle, size_tByReference data_size, size_tByReference locs_read);

	///////////////////////////////////

	public static class FuzzyLog extends PointerType {
		public FuzzyLog(Pointer address) {
			super(address);
		}

		public FuzzyLog() {
			super();
		}
	};

	public static class DAGHandle extends PointerType {
		public DAGHandle(Pointer address) {
			super(address);
		}

		public DAGHandle() {
			super();
		}
	};
}
