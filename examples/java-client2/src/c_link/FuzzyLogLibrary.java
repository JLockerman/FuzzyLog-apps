package c_link;


import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.StringArray;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import c_link.size_t;
import c_link.size_tByReference;

/**
 * JNA Wrapper for library <b>c_link</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class FuzzyLogLibrary { //extends Library {
	public static final String JNA_LIBRARY_NAME = "c_link";
	//public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(FuzzyLogLibrary.JNA_LIBRARY_NAME);
	//public static final FuzzyLogLibrary INSTANCE = (FuzzyLogLibrary) Native
	//		.loadLibrary(FuzzyLogLibrary.JNA_LIBRARY_NAME, FuzzyLogLibrary.class);

	static {
		Native.register(JNA_LIBRARY_NAME);
	}
	/** <i>native declaration : fuzzy_log.h</i> */
	public static final int FUZZY_LOG_HEADER = (int) 1;
	/** <i>native declaration : fuzzy_log.h</i> */
	public static final int DELOS_MAX_DATA_SIZE = (int) 8000;

	/** <i>native declaration : fuzzy_log.h:189</i> */
	public interface fuzzy_log_callback extends Callback {
		byte apply(Pointer uint8_tPtr1, short uint16_t1);
	};

	/**
	 * !<br>
	 * Original signature : <code>DAGHandle* new_dag_handle_with_skeens(size_t, const const char**, colors*)</code><br>
	 * <i>native declaration : fuzzy_log.h:39</i>
	 */
	public static native Pointer new_dag_handle_with_skeens(size_t num_chain_servers, StringArray chain_server_ips, colors.ByReference interesting_colors);

	public static native c_link.reader_and_writer.ByValue split_dag_handle(Pointer handle);

	///////////////////////////////////

    public static native void start_fuzzy_log_server_thread(String server_ip);

	///////////////////////////////////

	public static native c_link.write_id.ByValue wh_async_append(Pointer handle, ByteBuffer data, size_t data_size, int inhabits);

	public static native c_link.write_id.ByValue wh_async_multiappend(Pointer handle, ByteBuffer data, size_t data_size, colors.ByReference inhabits);

	public static native c_link.write_id.ByValue wh_async_no_remote_multiappend(Pointer handle, ByteBuffer data, size_t data_size, colors.ByReference inhabits);

	public static native void wh_flush_completed_appends(Pointer handle);

	public static native c_link.write_id.ByValue wh_wait_for_any_append(Pointer handle);

	///////////////

	public static native void rh_snapshot(Pointer handle);

	public static native void rh_snapshot_colors(Pointer handle, colors.ByReference colors);

	public static native c_link.get_next_val.ByValue rh_get_next2(Pointer handle, size_tByReference data_size, size_tByReference locs_read);

	///////////////////////////////////

	public static class FuzzyLog extends PointerType {
		public FuzzyLog(Pointer address) {
			super(address);
		}

		public FuzzyLog() {
			super();
		}
	};

	public static class DAGHandle extends PointerType {
		public DAGHandle(Pointer address) {
			super(address);
		}

		public DAGHandle() {
			super();
		}
	};
}
